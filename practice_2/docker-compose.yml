services:
  db:
    image: postgres:17
    container_name: pg17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: app_db
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      # Явно укажем хост, чтобы не зависеть от DNS
      test: ["CMD-SHELL", "pg_isready -U postgres -d app_db -h 127.0.0.1"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  api:
    build:
      context: .
      dockerfile: dockerfile.api
    working_dir: /code
    volumes:
      - ./:/code
    environment:
      PYTHONPATH: /code
      DB_HOST: db
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: app_db
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    command: >
      bash -lc "
        until pg_isready -h db -p 5432 -U postgres; do
          echo 'Waiting for Postgres...'; sleep 1; done &&
        alembic upgrade head &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8000:8000"

  worker:
    build:
      context: .
      dockerfile: dockerfile.worker
    working_dir: /code
    volumes:
      - ./:/code
    environment:
      PYTHONPATH: /code
      DB_HOST: db
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: app_db
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    command: >
      bash -lc "
        until pg_isready -h db -p 5432 -U postgres; do
          echo 'Waiting for Postgres...'; sleep 1; done &&
        celery -A workers.celery_app:celery_app worker -l info -P solo
      "
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

volumes:
  pgdata: