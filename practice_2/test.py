import re


text = """Когда мы пишем программы, нам часто требуется анализировать текст.
Например, функция может подсчитывать количество слов, количество символов, а также находить самое длинное слово.
Это особенно полезно при обработке данных, создании поисковых систем или даже в простых учебных заданиях.

Некоторые слова могут быть короткими, вроде «кот» или «дом».
Другие встречаются средние по длине: «программирование», «автоматизация», «алгоритм».
Но иногда встречаются и настоящие монстры: «суперкалифрагилистикэкспиалидошес», «гиперпараметризация», «ультрамикроскопический».

Кроме того, важно проверять, как функция работает с пунктуацией: запятыми, точками, тире — ведь текст редко бывает идеально чистым.
Также стоит учитывать пробелы, переносы строк и разные типы символов: латиницу (например, word), цифры (12345) и даже смешанные формы вроде test_пример123.

Таким образом, длинный тестовый текст помогает убедиться, что функция работает корректно в любых ситуациях."""

def parse_text(text: str): 
    cleaned_text = re.sub(r"[!,.?@+\-/><%:;]", "", text.lower())
    words = cleaned_text.split()
    
    words_counter = len(words)
    unique_words_counter = len(set(words))
    symbols_counter = len(re.findall(r"[!,.?@+\-/><%:;]", text))
    longest_word = max(words, key=len) if words else ""

    return {
            "words count": words_counter, 
            "longest word": longest_word, 
            "unique words count": unique_words_counter, 
            "symbols count": symbols_counter
            }

print(parse_text(text))