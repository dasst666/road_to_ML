import logging
import time
from fastapi import FastAPI, Request

from ml.model import predict_label_score
from schemas.predict import PredictIn, PredictOut


app = FastAPI(title="Minimal Predict")


logger = logging.getLogger("uvicorn.error")
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start = time.time()
    logger.info("‚û°Ô∏è START %s %s", request.method, request.url.path)
    try:
        response = await call_next(request)
        return response
    finally:
        dur_ms = (time.time() - start) * 1000
        # response –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –µ—Å–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã—à–µ ‚Äî –ø–æ—ç—Ç–æ–º—É –≤ finally –ø–∏—à–µ–º –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
        status = getattr(locals().get("response", None), "status_code", "-")
        logger.info("‚úÖ END   %s %s -> %s (%.1f ms)", request.method, request.url.path, status, dur_ms)

@app.on_event("startup")
def warmup():
    from ml.model import get_pipeline
    """–ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω, –Ω–æ –Ω–µ –≤–∞–ª–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    try:
        _ = get_pipeline()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏/—Ç–æ–∫–µ–Ω–∞–π–∑–µ—Ä–∞
        logger.info("üßä Warmed up sentiment pipeline")
    except Exception:
        logger.exception("Warmup failed ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º –±–µ–∑ –ø—Ä–æ–≥—Ä–µ–≤–∞")

@app.post("/predict", response_model=PredictOut)
def predict(payload: PredictIn):
    label, score = predict_label_score(payload.text)
    return PredictOut(label=label, score=score)